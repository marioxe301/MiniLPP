%option lang = "C++"
%option namespace = "Ast"

%decls %{
    #include <string>
    #include <iostream>
    #include <unordered_map>
    #include <vector>
    #include <cmath>
    #include <algorithm>
    #include <sstream>
    #include <tuple>

    #define CHAR_TYPE 0
    #define BOOL_TYPE 1
    #define INT_TYPE 2
    #define ARRAY_TYPE 3
    namespace Ast{ class Expr; }
    using list = std::vector<Ast::Expr*>;

    // [id] list(id , place , type , byreference )
    using func_arg = std::vector<std::tuple<std::string ,std::string,int,bool>>;

    using vars_decl = std::unordered_map<int,std::vector<std::string>>;
    using array_size = std::vector<Ast::Expr*>;
    using string_l = std::vector<std::string>; 

    using _string = std::string;

%}


%{
    #include "ast.h"
    int label_decl_index = 0;
    int temp_decl_index = 0;

    std::string ret_addr = "";

    // Declaraciones
    std::vector<std::tuple<std::string,int>>var_decl_list;
    std::vector<std::tuple<std::string,int>>arr_decl_list;
    std::vector<std::tuple<std::string,std::string>>for_var_list;
    func_arg args_list;

    // Para las funciones y procedimientos
    
    int str_decl_index = 0;
    std::vector<std::string>str_decl_list;




    //Funciones
    void addStringToList(_string msg){
        str_decl_list.push_back(msg);
    }

    _string newStringName(){
        return "Str"+std::to_string(str_decl_index++);
    }

    _string newLabel(){
        return "L"+std::to_string(label_decl_index++);
    }

    _string newTemp(){
        int offset = 1;
        return "dword[ebp+"+std::to_string((temp_decl_index++ + offset)*4)+"]";
    }

    _string cleanTemporalStack(){
        std::string temp = "add esp , "+std::to_string(temp_decl_index*4);
        temp_decl_index=0;
        return temp;
    }

    _string reserveStackSpace(){
        return "sub esp , "+std::to_string(temp_decl_index*4);
    }

    void addArrToList(_string id,int size){
        auto it = std::find_if(arr_decl_list.begin(),arr_decl_list.end(),[id](auto e){ return std::get<0>(e) == id; });
        if(it == arr_decl_list.end()){
            arr_decl_list.push_back(std::make_tuple(id,size));
        }
    }

    int getArrSize(_string id){
        auto it = std::find_if(arr_decl_list.begin(),arr_decl_list.end(),[id](auto e){ return std::get<0>(e) == id; });
        if(it != arr_decl_list.end()){
            return std::get<1>(*it);
        }else{
            throw std::string("No array found");
        }
    }

    void addVarToList(_string id, int var_type){
        auto it = std::find_if(var_decl_list.begin(),var_decl_list.end(),[id](auto e){ return std::get<0>(e) == id; });
        if(it == var_decl_list.end()){
            var_decl_list.push_back(std::make_tuple(id,var_type));
        }
    }

    void addForVarToList(_string id, _string place){
        auto it = std::find_if(for_var_list.begin(),for_var_list.end(),[id](auto e){ return std::get<0>(e) == id;});
        if( it == for_var_list.end()){
            for_var_list.push_back(std::make_tuple(id,place));
        }
    }

    bool isAForVar(_string id){
        auto it = std::find_if(for_var_list.begin(),for_var_list.end(),[id](auto e){ return std::get<0>(e) == id;});
        if( it != for_var_list.end()){
            return true;
        }
        return false;
    }

    bool isAFuncVar(_string id){
        auto it = std::find_if(args_list.begin(),args_list.end(),[id](auto e){ return std::get<0>(e) == id;});
        if( it != args_list.end()){
            return true;
        }
        return false;
    }

    bool isArrayVar(_string id){
        auto it = std::find_if(arr_decl_list.begin(),arr_decl_list.end(),[id](auto e){ return std::get<0>(e) == id;});
        if( it != arr_decl_list.end()){
            return true;
        }
        return false;
    }

    _string getFuncVarPlace(_string id){
        auto it = std::find_if(args_list.begin(),args_list.end(),[id](auto e){ return std::get<0>(e) == id;});
        if( it != args_list.end()){
            return std::get<1>(*it);
        }
        throw std::string("Func variable not found");
    }

    int getFuncVarType(_string id){
        auto it = std::find_if(args_list.begin(),args_list.end(),[id](auto e){ return std::get<0>(e) == id;});
        if( it != args_list.end()){
            return std::get<2>(*it);
        }
        throw std::string("Func variable not found");
    }

    _string getForVarPlace(_string id){
        auto it = std::find_if(for_var_list.begin(),for_var_list.end(),[id](auto e){ return std::get<0>(e) == id;});
        if(it != for_var_list.end()){
            return std::get<1>(*it);
        }
        throw std::string("For variable not found");
    }

    void deleteForVar(_string id){
        auto it = std::find_if(for_var_list.begin(),for_var_list.end(),[id](auto e){ return std::get<0>(e) == id;});
        if(it != for_var_list.end()){
            for_var_list.erase(it);
        }
    }

    int findVarType(_string id){
        auto it = std::find_if(var_decl_list.begin(),var_decl_list.end(),[id](auto e){ return std::get<0>(e) == id; });
        if(it != var_decl_list.end()){
            return std::get<1>(*it);
        }else{
            throw std::string("No variable Found");
        }
        return 0;
    }

%}


// =====================================
// Seccion de las Declaraciones de Nodos
// =====================================

%node Expr %abstract %typedef = {
    %nocreate _string place;
    %nocreate _string asm_code;
    %nocreate int type;
    %nocreate int value;

    %nocreate list expr_l;
}
%node BinaryExpr Expr %abstract ={
    Expr * expr1;
    Expr * expr2;
}

%node UnaryExpr Expr %abstract = {
    Expr * expr1;
}

%node AddExpr BinaryExpr
%node SubExpr BinaryExpr
%node MultExpr BinaryExpr
%node DivExpr BinaryExpr

%node OrExpr BinaryExpr
%node EqualExpr BinaryExpr
%node DiffExpr BinaryExpr
%node LessThanExpr BinaryExpr
%node LessThanEqExpr BinaryExpr
%node GreaterThanExpr BinaryExpr
%node GreaterThanEqExpr BinaryExpr
%node AndExpr BinaryExpr
%node ModExpr BinaryExpr
%node PowExpr BinaryExpr
%node NotExpr UnaryExpr

// ==================
// Print Nodes Start
// ==================

%node PrintArgList Expr ={
    list args;
}

%node PrintStmt Expr = {
    Expr *args;
}

// ==================
// Print Nodes End
// ==================

%node SeqStmt Expr = {
    list seq;
}

%node WhileStmt Expr = {
    Expr *cond;
    Expr *block;
}

%node DoWhileStmt Expr = {
    Expr *block;
    Expr *cond;
}

%node IfStmt Expr = {
    Expr *cond;
    Expr *true_block;
    Expr *false_block;
}

%node ForStmt Expr = {
    _string id;
    Expr *index;
    Expr *max_val;
    Expr *stmt;
}

%node AssignStmt Expr ={
    _string id;
    Expr *expr1;
}
%node ArrAssignStmt Expr = {
    _string id;
    Expr *index;
    Expr *expr1;
}

%node ReturnStmt Expr = {
    Expr *expr1;
}

%node CallProcStmt Expr = {
    _string id;
    Expr *args;
}

%node CallFuncStmt Expr = {
    _string id;
    Expr *args;
}

%node ArgsExprList Expr = {
    list args;
}

// ==================
// Program Nodes Start
// ==================

%node ProgramDeclStmt Expr = {
    Expr * vars_decl;
    Expr * sub_prog_decl;
    Expr * stmt_list;
}

%node VarDeclStmt Expr = {
    vars_decl vars; 
    Expr *arr_size;
}

%node FunctionDecl Expr = {
    _string id;
    Expr *args;
    Expr *stmts;
}

%node ProcedureDecl Expr = {
    _string id;
    Expr *args;
    Expr *stmts;
}

%node FuncArgsDeclList Expr = {
    func_arg args_list;
}

// ===================
// Program Nodes End
// ===================

%node NumberExpr Expr = {
    int val;
}

%node VarExpr Expr = {
    _string id;
}

%node VarArrayExpr Expr = {
    _string id;
    Expr * index;
}

%node CharExpr Expr = {
    char val;
}

%node BoolExpr Expr = {
    bool val;
}

%node StringLiteral Expr = {
    _string msg;
}

%operation void generate_code(Expr*e)


// ==========================
// Seccion de las Expresiones
// ==========================

generate_code(AddExpr){
    generate_code(e->expr1);
    generate_code(e->expr2);

    if(e->expr1->type == INT_TYPE && e->expr2->type == INT_TYPE){
        e->type = INT_TYPE;
    }else{
        throw std::string("Invalid type for operation");
    }

    e->place = newTemp();

    std::ostringstream out;

    out << e->expr1->asm_code << "\n"
        << e->expr2->asm_code << "\n"
        << "mov eax, " << e->expr1->place << "\n"
        << "mov ebx, " <<e->expr2->place << "\n"
        << "add eax, ebx\n"
        << "mov " << e->place << ", eax\n";
    
    e->asm_code = out.str();

}
generate_code(SubExpr){
    generate_code(e->expr1);
    generate_code(e->expr2);

    if(e->expr1->type == INT_TYPE && e->expr2->type == INT_TYPE){
        e->type = INT_TYPE;
    }else{
        throw std::string("Invalid type for operation");
    }
    
    e->place = newTemp();

    std::ostringstream out;

    out << e->expr1->asm_code << "\n"
        << e->expr2->asm_code << "\n"
        << "mov eax, " << e->expr1->place << "\n"
        << "mov ebx, " <<e->expr2->place << "\n"
        << "sub eax, ebx\n"
        << "mov " << e->place << ", eax\n";
    
    e->asm_code = out.str();
}
generate_code(MultExpr){
    generate_code(e->expr1);
    generate_code(e->expr2);

    if(e->expr1->type == INT_TYPE && e->expr2->type == INT_TYPE){
        e->type = INT_TYPE;
    }else{
        throw std::string("Invalid type for operation");
    }

    e->place = newTemp();

    std::ostringstream out;

    out << e->expr1->asm_code << "\n"
        << e->expr2->asm_code << "\n"
        << "mov eax, " <<e->expr2->place << "\n"
        << "mul "<< e->expr1->place << "\n"
        << "mov "<< e->place << ", eax\n";
    
    e->asm_code = out.str();
}
generate_code(DivExpr){
    generate_code(e->expr1);
    generate_code(e->expr2);

    if(e->expr1->type == INT_TYPE && e->expr2->type == INT_TYPE){
        e->type = INT_TYPE;
    }else{
        throw std::string("Invalid type for operation");
    }

    e->place = newTemp();

    std::ostringstream out;
    
    out << e->expr1->asm_code << "\n"
        << e->expr2->asm_code << "\n"
        << "mov eax, "<<e->expr1->place <<"\n"
        << "mov edx, 0\n"
        << "div "<< e->expr2->place << "\n"
        << "mov "<< e->place << ", eax\n";
    
    e->asm_code = out.str();
}
generate_code(OrExpr){
    generate_code(e->expr1);
    generate_code(e->expr2);
    std::string label_true = newLabel();
    std::string label_end = newLabel();
    e->place = newTemp();

    if(e->expr1->type == BOOL_TYPE && e->expr2->type == BOOL_TYPE){
        e->type = BOOL_TYPE;
    }else{
        throw std::string("Invalid type for operation");
    }

    std::ostringstream out;

    out << e->expr1->asm_code <<"\n"
        << e->expr2->asm_code << "\n"
        << "cmp "<<e->expr1->place<<" , 1\n"
        << "je "<< label_true << "\n"
        << "cmp "<<e->expr2->place<<" , 1\n"
        << "je "<< label_true << "\n"
        << "mov "<< e->place << " , 0\n"
        << "jmp "<< label_end << "\n"
        << label_true << ":\n"
        << "mov "<< e->place << " , 1\n"
        << label_end << ":\n";
    
    e->asm_code = out.str();
}
generate_code(EqualExpr){
    generate_code(e->expr1);
    generate_code(e->expr2);

    if(e->expr1->type == INT_TYPE && e->expr2->type == INT_TYPE){
        e->type = BOOL_TYPE;
    }else{
        throw std::string("Invalid type for operation");
    }

    e->place = newTemp();

    std::ostringstream out;

    out << e->expr1->asm_code << "\n"
        << e->expr2->asm_code << "\n"
        << "mov eax, "<< e->expr1->place << "\n"
        << "cmp eax, "<< e->expr2->place << "\n"
        << "mov eax, 0\n"
        << "sete al\n"
        << "mov "<< e->place << ", eax\n";
    e->asm_code = out.str();
  
}
generate_code(DiffExpr){
    generate_code(e->expr1);
    generate_code(e->expr2);

    if(e->expr1->type == INT_TYPE && e->expr2->type == INT_TYPE){
        e->type = BOOL_TYPE;
    }else{
        throw std::string("Invalid type for operation");
    }

    e->place = newTemp();

    std::ostringstream out;

    out << e->expr1->asm_code << "\n"
        << e->expr2->asm_code << "\n"
        << "mov eax, "<< e->expr1->place << "\n"
        << "cmp eax, "<< e->expr2->place << "\n"
        << "mov eax, 0\n"
        << "setne al\n"
        << "mov "<< e->place << ", eax\n";
    e->asm_code = out.str();
  
}
generate_code(LessThanExpr){
    generate_code(e->expr1);
    generate_code(e->expr2);

    if(e->expr1->type == INT_TYPE && e->expr2->type == INT_TYPE){
        e->type = BOOL_TYPE;
    }else{
        throw std::string("Invalid type for operation");
    }

    e->place = newTemp();

    std::ostringstream out;

    out << e->expr1->asm_code << "\n"
        << e->expr2->asm_code << "\n"
        << "mov eax, "<< e->expr1->place << "\n"
        << "cmp eax, "<< e->expr2->place << "\n"
        << "mov eax, 0\n"
        << "setl al\n"
        << "mov "<< e->place << ", eax\n";
    e->asm_code = out.str();
    
}
generate_code(LessThanEqExpr){
    generate_code(e->expr1);
    generate_code(e->expr2);

    if(e->expr1->type == INT_TYPE && e->expr2->type == INT_TYPE){
        e->type = BOOL_TYPE;
    }else{
        throw std::string("Invalid type for operation");
    }

    e->place = newTemp();

    std::ostringstream out;

    out << e->expr1->asm_code << "\n"
        << e->expr2->asm_code << "\n"
        << "mov eax, "<< e->expr1->place << "\n"
        << "cmp eax, "<< e->expr2->place << "\n"
        << "mov eax, 0\n"
        << "setle al\n"
        << "mov "<< e->place << ", eax\n";
    e->asm_code = out.str();
    
}
generate_code(GreaterThanExpr){
    generate_code(e->expr1);
    generate_code(e->expr2);

    if(e->expr1->type == INT_TYPE && e->expr2->type == INT_TYPE){
        e->type = BOOL_TYPE;
    }else{
        throw std::string("Invalid type for operation");
    }
    
    e->place = newTemp();

    std::ostringstream out;

    out << e->expr1->asm_code << "\n"
        << e->expr2->asm_code << "\n"
        << "mov eax, "<< e->expr1->place << "\n"
        << "cmp eax, "<< e->expr2->place << "\n"
        << "mov eax, 0\n"
        << "setg al\n"
        << "mov "<< e->place << ", eax\n";
    e->asm_code = out.str();
}
generate_code(GreaterThanEqExpr){
    generate_code(e->expr1);
    generate_code(e->expr2);

    if(e->expr1->type == INT_TYPE && e->expr2->type == INT_TYPE){
        e->type = BOOL_TYPE;
    }else{
        throw std::string("Invalid type for operation");
    }

    e->place = newTemp();

    std::ostringstream out;

    out << e->expr1->asm_code << "\n"
        << e->expr2->asm_code << "\n"
        << "mov eax, "<< e->expr1->place << "\n"
        << "cmp eax, "<< e->expr2->place << "\n"
        << "mov eax, 0\n"
        << "setge al\n"
        << "mov "<< e->place << ", eax\n";
    e->asm_code = out.str();
    
}
generate_code(AndExpr){
    generate_code(e->expr1);
    generate_code(e->expr2);

    if(e->expr1->type == BOOL_TYPE && e->expr2->type == BOOL_TYPE){
        e->type = BOOL_TYPE;
    }else{
        throw std::string("Invalid type for operation");
    }

    std::string label_false = newLabel();
    std::string label_end = newLabel();
    e->place = newTemp();

    std::ostringstream out;

    out << e->expr1->asm_code <<"\n"
        << e->expr2->asm_code << "\n"
        << "cmp "<<e->expr1->place<<" , 0\n"
        << "je "<< label_false << "\n"
        << "cmp "<<e->expr2->place<<" , 0\n"
        << "je "<< label_false << "\n"
        << "mov "<< e->place << " , 1\n"
        << "jmp "<< label_end << "\n"
        << label_false << ":\n"
        << "mov "<< e->place << " , 0\n"
        << label_end << ":\n";
    
    e->asm_code = out.str();
}
generate_code(ModExpr){
    generate_code(e->expr1);
    generate_code(e->expr2);

    if(e->expr1->type == INT_TYPE && e->expr2->type == INT_TYPE){
        e->type = INT_TYPE;
    }else{
        throw std::string("Invalid type for operation");
    }

    e->place = newTemp();

    std::ostringstream out;
    
    out << e->expr1->asm_code << "\n"
        << e->expr2->asm_code << "\n"
        << "mov eax, "<<e->expr1->place <<"\n"
        << "mov edx, 0\n"
        << "div "<< e->expr2->place << "\n"
        << "mov "<< e->place << ", edx\n";
    
    e->asm_code = out.str();
}
generate_code(PowExpr){
    generate_code(e->expr1);
    generate_code(e->expr2);

    if(e->expr1->type == INT_TYPE && e->expr2->type == INT_TYPE){
        e->type = INT_TYPE;
    }else{
        throw std::string("Invalid type for operation");
    }

    e->place = newTemp();

    std::string label_start = newLabel();
    std::string label_end = newLabel();

    std::ostringstream out;

    out << e->expr1->asm_code << "\n"
        << e->expr2->asm_code << "\n"
        << "mov ecx , " << e->expr2->place << "\n"
        << label_start << ":\n"
        << "cmp ecx , 0\n"
        << "je "<< label_end <<"\n"
        << "mov eax, "<< e->expr1->place << "\n"
        << "mul "<< e->expr1->place<< "\n"
        << "mov "<< e->place <<", eax\n"
        << "dec ecx\n"
        << "jmp "<< label_start << "\n"
        << label_end << ":\n";

    e->asm_code = out.str();
}

generate_code(NotExpr){
    
    generate_code(e->expr1);

    if(e->expr1->type == BOOL_TYPE){
        e->type = BOOL_TYPE;
    }else{
        throw std::string("Invalid type for operation");
    }

    e->place = newTemp();
    
    std::string label_invert = newLabel();
    std::string label_end = newLabel();

    std::ostringstream out;

    out << e->expr1->asm_code << "\n"
        << "cmp "<< e->expr1->place << ", 0\n"
        << "je " << label_invert << "\n"
        << "mov "<< e->place << ", 0\n"
        << "jmp "<< label_end << "\n"
        << label_invert << ":\n"
        << "mov "<< e->place << ", 1\n"
        << label_end << ":\n";
    
    e->asm_code = out.str();
}
generate_code(NumberExpr){
    e->place = newTemp();
    e->value = e->val;
    e->asm_code = "mov " + e->place + ", " + std::to_string(e->value);
    e->type = INT_TYPE;
}
generate_code(CharExpr){
    e->place = newTemp();
    e->value = e->val;
    e->asm_code = "mov " + e->place + ", "+std::to_string(e->value);
    e->type = CHAR_TYPE;
}
generate_code(BoolExpr){
    e->place = newTemp();
    e->value = e->val;
    e->asm_code = "mov " + e->place + ", " + std::to_string(e->value);
    e->type = BOOL_TYPE;
}


generate_code(VarExpr){
    if(isAForVar(e->id)){
        e->asm_code="";
        e->place = getForVarPlace(e->id);
        e->type = INT_TYPE;
    }else if(isAFuncVar(e->id)){
        e->asm_code="";
        e->place = getFuncVarPlace(e->id);
        e->type = getFuncVarType(e->id);
    }else if(isArrayVar(e->id)){
        e->asm_code="";
        e->place = e->id;
        e->type = ARRAY_TYPE;
    }else{
        e->asm_code="";
        e->place = "dword["+e->id+"]";
        e->type = findVarType(e->id);
    }
}
generate_code(StringLiteral){
    e->place = newStringName();
    e->asm_code = "";
    addStringToList(e->msg);
}

generate_code(VarArrayExpr){
    generate_code(e->index);
    int max_size = getArrSize(e->id);
    if(e->index->value > max_size) throw std::string("Index out of bounds");
    e->type = INT_TYPE;
    e->place = "dword["+e->id+"+"+std::to_string(e->index->value)+"*4]\n";
    e->asm_code = "";
}

// =========================
// Seccion de los Statements
// =========================

generate_code(PrintStmt){
    generate_code(e->args);

    std::ostringstream out;

    out << e->args->asm_code << "\n";
/*        << "push endl\n"
        << "push eol_f\n"
        << "call printf\n"
        << "add esp, 8\n";
*/
    e->asm_code = out.str();
}

generate_code(SeqStmt){
    for (auto &&i : e->seq)
    {
        generate_code(i);
        e->asm_code+=i->asm_code;
    }
}

generate_code(PrintArgList){
    std::ostringstream out;
    for (auto &&i : e->args)
    {
        generate_code(i);
        if(i->isA(StringLiteral_kind)){
            out << i->asm_code << "\n"
                << "push " << i->place << "\n"
                << "push s_f\n"
                << "call printf\n"
                << "add esp,8\n";
        }else if(i->isA(CharExpr_kind)){
            out << i->asm_code << "\n"
                << "push " << i->place << "\n"
                << "push c_f\n"
                << "call printf\n"
                << "add esp, 8\n";
        }else if(i->isA(BoolExpr_kind)){
                std::string print_false = newLabel();
                std::string print_end = newLabel();
                
                
                out << i->asm_code << "\n"
                    << "cmp "<< i->place << ", 0\n"
                    << "je "<< print_false << "\n"
                    << "push true\n"
                    << "push s_f\n"
                    << "call printf\n"
                    << "add esp , 8\n"
                    << "jmp " << print_end << "\n"
                    << print_false << ":\n"
                    << "push false\n"
                    << "push s_f\n"
                    << "call printf\n"
                    << "add esp , 8\n"
                    << print_end << ":\n";
        }else if(i->isA(VarExpr_kind)){
            if(i->type == CHAR_TYPE){
    
            out << i->asm_code << "\n"
                << "push " << i->place << "\n"
                << "push c_f\n"
                << "call printf\n"
                << "add esp, 8\n";
            }else if(i->type == BOOL_TYPE){
                std::string print_false = newLabel();
                std::string print_end = newLabel();

                out << i->asm_code << "\n"
                    << "cmp "<< i->place << ", 0\n"
                    << "je "<< print_false << "\n"
                    << "push true\n"
                    << "push s_f\n"
                    << "call printf\n"
                    << "add esp , 8\n"
                    << "jmp " << print_end << "\n"
                    << print_false << ":\n"
                    << "push false\n"
                    << "push s_f\n"
                    << "call printf\n"
                    << "add esp , 8\n"
                    << print_end << ":\n";
            }else{
                
                out << i->asm_code << "\n"
                    << "push "<< i->place << "\n"
                    << "push d_f\n"
                    << "call printf\n"
                    << "add esp, 8\n";
            }
        }else{
            
            out << i->asm_code << "\n"
                << "push "<< i->place << "\n"
                << "push d_f\n"
                << "call printf\n"
                << "add esp, 8\n";
        }
    }

    e->asm_code = out.str();
}
generate_code(ProgramDeclStmt){
    std::ostringstream out;

    out << "section .text\n";

    if(e->vars_decl != nullptr){
        generate_code(e->vars_decl);
        out<< e->vars_decl->asm_code << "\n";
    }
    if(e->sub_prog_decl != nullptr){
        generate_code(e->sub_prog_decl);
        out<< e->sub_prog_decl->asm_code << "\n";
    }
    
    generate_code(e->stmt_list);
    out << "main:\n" 
        << reserveStackSpace() << "\n"
        << "push ebp\n"
        << "mov ebp , esp\n"
        << e->stmt_list->asm_code << "\n"
        << "mov esp , ebp\n"
        << "pop ebp\n"
        << cleanTemporalStack() << "\n"
        << "ret";

    e->asm_code = out.str();
}

generate_code(VarDeclStmt){
    for(int i = 0; i < e->vars[INT_TYPE].size();i++){
        addVarToList(e->vars[INT_TYPE][i],INT_TYPE);
    }

    for(int i = 0; i < e->vars[BOOL_TYPE].size();i++){
        addVarToList(e->vars[BOOL_TYPE][i],BOOL_TYPE);
    }

    for(int i = 0; i < e->vars[CHAR_TYPE].size();i++){
        addVarToList(e->vars[CHAR_TYPE][i],CHAR_TYPE);
    }

    for(int i = 0; i < e->vars[ARRAY_TYPE].size();i++){
        generate_code(e->arr_size);
        //cleanTemporalStack();
        addArrToList(e->vars[ARRAY_TYPE][i],e->arr_size->value);
    }

    e->asm_code = "";
}

generate_code(AssignStmt){

    std::ostringstream out;
    if(isAFuncVar(e->id)){
        int type_t = getFuncVarType(e->id);
        e->place = getFuncVarPlace(e->id);

        generate_code(e->expr1);

        if(e->expr1->type == BOOL_TYPE && type_t == BOOL_TYPE){
            out << e->expr1->asm_code << "\n"
                << "mov eax, " << e->expr1->place << "\n"
                << "mov " << e->place << ", eax \n";
        }else if(e->expr1->type == CHAR_TYPE && type_t == CHAR_TYPE){
            out << e->expr1->asm_code << "\n"
                << "mov eax, " << e->expr1->place << "\n"
                << "mov " << e->place << ", eax \n";
        }else if(e->expr1->type == INT_TYPE && type_t == INT_TYPE){
            out << e->expr1->asm_code << "\n"
                << "mov eax, " << e->expr1->place << "\n"
                << "mov " << e->place << ", eax \n";
        }else{
            throw std::string("Variable Error Type");
        } 

    }else{
        int type_t = findVarType(e->id);
        generate_code(e->expr1);

        if(e->expr1->type == BOOL_TYPE && type_t == BOOL_TYPE){
            out << e->expr1->asm_code << "\n"
                << "mov eax, "<< e->expr1->place << "\n"
                << "mov dword["+e->id+"]" << ", eax\n";
        }else if(e->expr1->type == CHAR_TYPE && type_t == CHAR_TYPE){
            out << e->expr1->asm_code << "\n"
                << "mov eax, "<< e->expr1->place << "\n"
                << "mov dword["+e->id+"]" << ", eax\n";
        }else if(e->expr1->type == INT_TYPE && type_t == INT_TYPE){
            out << e->expr1->asm_code << "\n"
                << "mov eax, "<< e->expr1->place << "\n"
                << "mov dword["+e->id+"]" << ", eax\n";
        }else{
            throw std::string("Variable Error Type");
        }

    }
    
    e->asm_code = out.str();
}

generate_code(ArrAssignStmt){
    int max_size = getArrSize(e->id);
    std::ostringstream out;
    generate_code(e->index);
    if(e->index->value > max_size) throw std::string("Index out of bounds");
    generate_code(e->expr1);

    std::string _place = "dword["+e->id+"+"+std::to_string(e->index->value)+"*4]";

    if(e->expr1->type == INT_TYPE){
        out << e->expr1->asm_code << "\n"
            << "mov eax, " << e->expr1->place << "\n"
            << "mov " << _place << ", eax\n";
    }else{
        throw std::string("Variable Error Type");
    }

    e->asm_code = out.str();
}

generate_code(WhileStmt){
    generate_code(e->cond);


    if(e->cond->type != BOOL_TYPE) throw std::string("Only Boolean expresion loop");
    std::ostringstream out;

    std::string start_label = newLabel();
    std::string end_label = newLabel();

    out << start_label << ":\n"
        << e->cond->asm_code << "\n"
        << "cmp " << e->cond->place << ", 0\n"
        << "je " << end_label << "\n";
    
    generate_code(e->block);

    out << e->block->asm_code << "\n"
        << "jmp " << start_label << "\n"
        << end_label << ":\n";

    e->asm_code = out.str();
}

generate_code(DoWhileStmt){
    generate_code(e->block);

    std::ostringstream out;

    std::string start_label = newLabel();
    std::string end_label = newLabel();

    out << start_label << ":\n"
        << e->block->asm_code << "\n";
    
    generate_code(e->cond);
    if(e->cond->type != BOOL_TYPE) throw std::string("Only Boolean expresion in loop");

    
    out << e->cond->asm_code << "\n"
        << "cmp " << e->cond->place << ", 1\n"
        << "je " << end_label << "\n"
        << "jmp " << start_label << "\n"
        << end_label << ":\n";


    e->asm_code = out.str();
}

generate_code(IfStmt){
   generate_code(e->cond);
   if(e->cond->type != BOOL_TYPE) throw std::string("Only Boolean support");
   generate_code(e->true_block);
   
   std::ostringstream out;

    
    if(e->false_block != nullptr){
        generate_code(e->false_block);

    std::string else_label = newLabel();
    std::string end_label = newLabel();

        out << e->cond->asm_code << "\n"
            << "cmp "<<e->cond->place << ", 0\n"
            << "je " << else_label << "\n"
            << e->true_block->asm_code << "\n"
            << "jmp " << end_label << "\n"
            << else_label << ":\n"
            << e->false_block->asm_code << "\n"
            << end_label << ":\n";
    }else{
        std::string end_label = newLabel();
        out << e->cond->asm_code << "\n"
            << "cmp " << e->cond->place << ", 0\n"
            << "je " << end_label << "\n"
            << e->true_block->asm_code << "\n"
            << end_label << ":\n";
   }

    e->asm_code = out.str();
}

generate_code(ForStmt){
    generate_code(e->index);
    generate_code(e->max_val);

    int max_cond = e->max_val->value;

    std::string start_label = newLabel();
    std::string end_label = newLabel();
    std::ostringstream out;

    // Despues de agregar la variable llamamos al stmt por si llega usar la variable dentro
    addForVarToList(e->id,e->index->place);
    generate_code(e->stmt);

    out << e->index->asm_code << "\n"
        << start_label << ":\n"
        << "cmp " << e->index->place << ", " << std::to_string(max_cond) << "\n"
        << "jg " << end_label << "\n"
        << e->stmt->asm_code << "\n"
        << "inc " << e->index->place << "\n"
        << "jmp " << start_label << "\n"
        << end_label << ":\n";

    deleteForVar(e->id);
    e->asm_code = out.str();
}

generate_code(FunctionDecl){
    std::ostringstream out;

    std::string tag = e->id;
    if(e->args!= nullptr){
        generate_code(e->args);
    }
    generate_code(e->stmts);
    out << tag << ":\n";
    out << e->stmts->asm_code << "\n";
    out << "ret \n";


    e->asm_code = out.str();
}

generate_code(ProcedureDecl){
    std::ostringstream out;
    
    std::string tag = e->id;
    if(e->args!= nullptr){
        generate_code(e->args);
    }

    generate_code(e->stmts);
    out << tag << ":\n";
    out << e->stmts->asm_code << "\n";
    out << "ret \n";


    e->asm_code = out.str();

}

generate_code(FuncArgsDeclList){
    for(int i= 0; i < e->args_list.size(); i++){
        std::get<1>(e->args_list[i]) = "dword[esp+" + std::to_string((i+1) * 4)+ "]";
    }
    args_list = e->args_list;
    e->asm_code="";
}

generate_code(ReturnStmt){
    std::ostringstream out;
    e->place = newTemp();
    ret_addr = e->place;
    generate_code(e->expr1);

    out << e->expr1->asm_code << "\n"
        << "mov eax , "<< e->expr1->place << "\n"
        << "mov " << e->place << ", eax\n"
        << "ret\n";
    
    e->asm_code = out.str();
}

generate_code(CallProcStmt){
    std::ostringstream out;
    if( e->args != nullptr){
        generate_code(e->args);
        out << e->args->asm_code << "\n";
        e->expr_l = e->args->expr_l ;
    }

    out << "call " << e->id << "\n";


    // hacer pop de todos los elementos
    for(int i=0; i < e->expr_l.size() ; i++){
        if(!std::get<3>(args_list[i])){
            out << "pop eax \n" ;   
        }
    }

    for(int i=0; i < e->expr_l.size() ; i++){
        if(!std::get<3>(args_list[i])){
            out << "pop " << e->expr_l[i]->place << "\n"; 
        }
    }

    e->asm_code = out.str();
    
}

generate_code(ArgsExprList){
    std::ostringstream out, rest, expr;
    int j = 0;
    for( auto &&i : e->args){
        generate_code(i);
        if(!std::get<3>(args_list[j])){
            rest << "push " << i->place << "\n";
        }
        
        if(std::get<2>(args_list[j]) == i->type){
            out << "push " << i->place << "\n";
        }else{
            throw std::string("Invalid arg type");
        }
        expr << i->asm_code << "\n";
        j++;
    }

    e->asm_code+= expr.str() + rest.str() + "\n"  + out.str() + "\n";
    e->expr_l = e->args;
}

generate_code(CallFuncStmt){
    std::ostringstream out;
    if( e->args != nullptr){
        generate_code(e->args);
        out << e->args->asm_code << "\n";
        e->expr_l = e->args->expr_l ;
    }

    out << "call " << e->id << "\n";

    // hacer pop de todos los elementos
    for(int i=0; i < e->expr_l.size() ; i++){
        if(!std::get<3>(args_list[i])){
            out << "pop eax \n" ;   
        }
    }

    for(int i=0; i < e->expr_l.size() ; i++){
        if(!std::get<3>(args_list[i])){
            out << "pop " << e->expr_l[i]->place << "\n"; 
        }
    }
    e->asm_code = out.str();
    e->place = ret_addr;
}